####### 50 characters ###########################

# A properly formed git commit subject line
# should always be able to complete the following
# sentence:
#
# "If applied, this commit will <your subject line here>"
#
# Subject line imperative uppercase verbs:
#
#   Add = Create a capability e.g. feature, test, dependency.
#   Drop = Delete a capability e.g. feature, test, dependency.
#   Fix = Fix an issue e.g. bug, typo, accident, misstatement.
#   Bump = Increase the version of something e.g. a dependency.
#   Make = Change the build process, or tools, or infrastructure.
#   Start = Begin doing something; e.g. enable a toggle, feature flag, etc.
#   Stop = End doing something; e.g. disable a toggle, feature flag, etc.
#   Optimize = A change that MUST be just about performance, e.g. speed up code.
#   Document = A change that MUST be only in the documentation, e.g. help files.
#   Refactor = A change that MUST be just refactoring.
#   Reformat = A change that MUST be just format, e.g. indent line, trim space, etc.
#   Rephrase = A change that MUST be just textual, e.g. edit a comment, doc, etc.

####### 72 characters #################################################

# More detailed explanatory text. Wrap it to 72 characters. The blank
# line separating the summary from the body is critical (unless you
# omit the body entirely).

# Write your commit message in the imperative: "Fix bug" and not
# "Fixed bug" or "Fixes bug." This convention matches up with commit
# messages generated by commands like git merge and git revert.

# Further paragraphs come after blank lines.

# - Bullet points are okay, too.
# - Typically a hyphen or asterisk is used for the bullet, followed
#    by a single space. Use a hanging indent.
