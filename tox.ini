[tox]
envlist = py{27,34,35,36,37,38}, pypy{2,27,3,35}, lint, typing, docs, mutate, changelog, deploy
skip_missing_interpretters = True

[travis]
python =
    2.7: py27
    3.4: py34
    3.5: py35
    3.6: py36
    3.7: py37
    3.8: py38
    3.8-dev: py38
    pypy2: pypy2
    pypy2.7: pypy27
    pypy3: pypy3
    pypy3.5: pypy35
    docs: docs
    lint: lint
    changelog: changelog
    mutate: mutate
    deploy: lint, typing, py27, py37, docs, changelog

[coverage:run]
omit = .tox/*
branch = True

[testenv]
description = Build and test the codebase in the {envname} interpreter.
passenv =
  CI
  TRAVIS
  TRAVIS_*
deps =
    groestlcoin_hash
    pytest
    pytest-cov
    coverage
    wheel
    pytest-html
commands =
    pip wheel -w {toxinidir}/dist/{envname}/ --find-links={toxinidir}/dist/{envname}/ -b {toxinidir}/build/{envname}/ pycoin
    py.test --cov-config=tox.ini --cov=. {posargs:tests} --html={toxinidir}/reports/{envname}_pytest.html

[testenv:lint]
description = Lint code and docstrings with flake8 and pylint. Generates Reports.
basepython = python3.7
deps = 
    flake8
    flake8-html
    flake8-docstrings
    pylint
commands =
    /bin/bash -c 'pylint -r y --output-format=html pycoin |tee {toxinidir}/reports/pylint'
    flake8 --format=html --htmldir={toxinidir}/reports/flake8 --max-line-length=119 --tee

[testenv:typing]
description = Do Static Type check with mypy. Generates Reports.
basepython = python3.7
deps = 
    mypy
    lxml
setenv =
    MYPYPATH = {toxinidir}
commands =
    mypy --config-file tox.ini {posargs:pycoin} --html-report {toxinidir}/reports/mypy

[testenv:docs]
description = Run sphinx-build to build HTML documentation and check for errors.
basepython = python3.7
deps = sphinx >= 1.7.5, < 2
commands = 
           sphinx-build -d "{toxworkdir}/docs_doctree" docs "{toxworkdir}/docs_out" --color -bhtml {posargs}
           python -c 'import pathlib; print("documentation available under file://\{0\}".format(pathlib.Path(r"{toxworkdir}") / "docs_out" / "index.html"))'

[testenv:mutate]
description = Run mut.py testing on the code base.
basepython = python3.7
deps =
    {[testenv]deps}
    mutpy
ignore_errors = True
commands = mut.py --colored-output --show-mutants --target pycoin --unit-test {posargs:tests} --timeout-factor 1

[testenv:changelog]
description = Build the changelog.md file
basepython = python3.7
deps =
    gitchangelog
commands =
    - /bin/bash -c 'gitchangelog `git describe | cut -d "-" -f1`...HEAD |tee {toxinidir}/reports/CHANGELOG'
